using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using static System.Runtime.InteropServices.JavaScript.JSType;
using ClassLibrary;
using MultiplesOfFour;
using ClassLibrary.NetTraining;
using System.Linq;
using System.Security.Cryptography.X509Certificates;


namespace FirstProject
{
    class Program
    {



        public void codeCheckPoints() 
        {
            Console.WriteLine();
            Console.WriteLine("************************************************************************************************************************");
            Console.WriteLine();

        }



        static void Main(string[] args)
        {
            //-------------------------------------------------------------------Intro--------------------------------------------------------------------------------------

            Console.WriteLine("C#/.Net Training");
            try
            {
                Thread.Sleep(700);
            }
            catch (InterruptedException e)
            {
                Console.WriteLine(e.ToString());
            };

            Console.WriteLine();
			
            try
            {
                Thread.Sleep(700);
            }
            catch (InterruptedException e)
            {
                Console.WriteLine(e.ToString());
            };
            Console.WriteLine("Here is everything that was in this solution made till now:");
            try
            {
                Thread.Sleep(700);
            }
            catch (InterruptedException e)
            {
                Console.WriteLine(e.ToString());
            };
 
 checkpoint.codeCheckPoints();

 Regex poprawneMaileRegex = new Regex(@"^([a-z0-9]+)\.?([a-z0-9]+)@([a-z]+)\.com$");  //regex do sprawdzania poprawno≈õci emaili: 
 string[] emailRegex = { "test.test2@gmail.com", ".test@gmail.com", "test.@gmial.com", "test231@.gmailcom", "test2@gamil.co," };

 int r = 0;

 checkpoint.codeCheckPoints();
 string readEmail = "";
 bool isProperEmail = false;
 string filePath = @"C:\Users\jguth1\testemail\proper_emails.txt";

 Console.WriteLine("If you want to read all emails from document type 1 \nIf you want to add new email type 2 \nTo end press 0:");

 while (true)
 {
     int emailChoices = int.Parse(Console.ReadLine());
     if (emailChoices == 1)
     {
         Console.WriteLine("All emails in document:");
         using (StreamReader documentReader = new StreamReader(filePath))
         {
             Console.WriteLine($"{documentReader.ReadToEnd()}");
             checkpoint.codeCheckPoints();
             Console.WriteLine("If you want to read all emails from document type 1 \nIf you want to add new email type 2 \nTo end press 0:");

         }
     }

     else if (emailChoices == 2)
     {
         while (!isProperEmail)

         {
             Console.WriteLine("Type your email:");
             readEmail = Console.ReadLine();
             isProperEmail = poprawneMaileRegex.IsMatch(readEmail);

             if (isProperEmail)
             {
                 Console.WriteLine("Proper Email");
                 Console.WriteLine($"Email: {readEmail} has been added to file");
                 using (StreamWriter writer = new StreamWriter(filePath, true))
                 {
                     writer.WriteLine(readEmail);
                     checkpoint.codeCheckPoints();
                     Console.WriteLine("If you want to read all emails from document type 1 \nIf you want to add new email type 2 \nTo end press 0:");
                 }
                 checkpoint.codeCheckPoints();
             }
             else
             {
                 Console.WriteLine("Not a proper email");
                 Console.WriteLine("If you want to try again add your email type 1 \nTo end press 0:");
                 int exitChoice = int.Parse(Console.ReadLine());
                 if (exitChoice == 0)
                 {
                     checkpoint.codeCheckPoints();
                     Console.WriteLine("If you want to read all emails from document type 1 \nIf you want to add new email type 2 \nTo end press 0:");
                     break;
                 }
                 else if ((exitChoice == 1))
                 {
                     Console.WriteLine("Type your email:");
                     readEmail = Console.ReadLine();
                     isProperEmail = poprawneMaileRegex.IsMatch(readEmail);

                     if (isProperEmail)
                     {
                         Console.WriteLine("Proper Email");
                         Console.WriteLine($"Email: {readEmail} has been added to file");
                         using (StreamWriter writer = new StreamWriter(filePath, true))
                         {
                             writer.WriteLine(readEmail);
                             checkpoint.codeCheckPoints();
                             Console.WriteLine("If you want to read all emails from document type 1 \nIf you want to add new email type 2 \nTo end press 0:");
                         }
                         checkpoint.codeCheckPoints();
                     }
                     else
                     {
                         Console.WriteLine("You write email wrong again. I'm sorry but I can't give you more tries. Bye");
                         checkpoint.codeCheckPoints();
                         break;
                     }
                 } 
             } 
         }
     }
     else if (emailChoices == 0)
     {
         Console.WriteLine("You chose to exit.");
         checkpoint.codeCheckPoints();
         break;
     }
     else
     {
         Console.WriteLine("Wrong choice, try again:");
         checkpoint.codeCheckPoints();
         Console.WriteLine("If you want to read all emails from document type 1 \nIf you want to add new email type 2 \nTo end press 0:");
         continue;

     }
 }

            //-------------------------------------------------------------Datas (from start to end) describtion -----------------------------------------------------------

            Console.WriteLine();
            checkpoint.codeCheckPoints();
            

            try
            {
                Thread.Sleep(500);
            }
            catch (InterruptedException e)
            {
                Console.WriteLine(e.ToString());
            };
            DateTime now = DateTime.Now;
            Console.WriteLine("Time we got right now: " + now + " UTC+01:00");
            try
            {
                Thread.Sleep(500);
            }
            catch (InterruptedException e)
            {
                Console.WriteLine(e.ToString());
            };
            DateTime whenBuild = new DateTime(2024, 4, 10, 13, 00, 00);
            Console.WriteLine("Time when I started My trianing with C#/.Net: " + whenBuild + " UTC+01:00");
            try
            {
                Thread.Sleep(500);
            }
            catch (InterruptedException e)
            {
                Console.WriteLine(e.ToString());
            };
            DateTime whenFinish = new DateTime(2024, 4, 15, 16, 00, 00);
            Console.WriteLine("Time when I plan to end My trianing with C#/.Net: " + whenFinish + " UTC+01:00");
            try
            {
                Thread.Sleep(500);
            }
            catch (InterruptedException e)
            {
                Console.WriteLine(e.ToString());
            };

            checkpoint.codeCheckPoints();

        }
    }
}
